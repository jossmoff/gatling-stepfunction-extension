plugins {
    id 'scala'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
    id 'com.palantir.git-version' version '3.1.0'
    id 'io.github.gradle-nexus.publish-plugin' version "1.3.0"
    id "com.avast.gradle.docker-compose" version "0.17.4"
    id 'com.diffplug.spotless' version '6.25.0'
}

group = 'dev.joss'
version = gitVersion()

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11


repositories {
    mavenCentral()
}

ext {
    junitVersion = "5.11.0"
    scalaVersion = "2.13.14"
    gatlingVersion = "3.11.5"
    awsSdkVersion = "2.27.6"
}


dependencies {
    implementation("org.scala-lang:scala-library:${scalaVersion}")
    implementation("io.gatling:gatling-core:${gatlingVersion}")
    implementation("io.gatling:gatling-commons:${gatlingVersion}")
    implementation("software.amazon.awssdk:sfn:${awsSdkVersion}")



    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    testImplementation("software.amazon.awssdk:sfn:${awsSdkVersion}")
    testImplementation("software.amazon.awssdk:apache-client:${awsSdkVersion}")
    testImplementation("com.typesafe.akka:akka-testkit_3:2.8.3")
    testImplementation("com.typesafe.akka:akka-slf4j_3:2.8.3")
    testImplementation("io.netty:netty-bom:4.1.112.Final")
    testImplementation("io.gatling:gatling-core:${gatlingVersion}")

    testImplementation("org.scalatest:scalatest-flatspec_3:3.3.0-SNAP4")
    testImplementation("org.scalatest:scalatest-shouldmatchers_3:3.2.16")
    testImplementation("org.scalatest:scalatest_3:3.3.0-SNAP4")

    testImplementation("org.scalatestplus:scalacheck-1-17_3:3.2.18.0")
    testImplementation("org.scalatestplus:mockito-4-11_3:3.2.16.0")
    testImplementation("org.scalatestplus:junit-5-9_3:3.2.16.0")

    testImplementation("org.scala-lang.modules:scala-xml_3:2.3.0")

}


spotless {
    scala {
        scalafmt()
    }
}


java {
    withJavadocJar()
    withSourcesJar()
}

test {
    exclude 'dev/joss/gatling/sfn/base'
    useJUnitPlatform()
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    systemProperty 'P', null
}

// Create local statemachines for tests
task deployStateMachines(type: Exec) {
    commandLine 'src/test/resources/deploy.sh'
}
deployStateMachines.dependsOn composeUp
test.dependsOn deployStateMachines
dockerCompose.isRequiredBy(test)

dockerCompose {
    useComposeFiles = ['src/test/resources/docker-compose.yml']
    composeAdditionalArgs = ['--verbose']
    captureContainersOutput = true
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'dev.joss'
            artifactId = 'gatling-stepfunction-extension'
            from components.java
            pom {
                name = 'Gatling Step Function Extension'
                description = 'A Gatling extension for executing step functions.'
                url = 'https://github.com/jossmoff/gatling-stepfunction-extension'
                inceptionYear = '2023'
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'http://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'jossmoff'
                        name = 'Joss Moffatt'
                        email = 'josshmoffatt@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git@github.com:jossmoff/gatling-stepfunction-extension.gitt'
                    developerConnection = 'scm:git@github.com:jossmoff/gatling-stepfunction-extension.git'
                    url = 'https://github.com/jossmoff/gatling-stepfunction-extension'
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            username = project.findProperty("sonatypeUsername")
            password = project.findProperty("sonatypePassword")
        }
    }
}

signing {
    def signingKey = project.findProperty("signingKey")
    def signingPassword = project.findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}
